<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_toga_walk_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>obj_lifeform_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
//band-aid duplicate hero bug
if (instance_number(obj_hero) &gt; 1) {
    instance_destroy();
}
event_inherited();
cur_action = scr_hero_idle_state;
cur_action_id = -1;
expr_value = 0;
spd = 3;
hspd = 0;
vspd = 0;
xaxis = 0;
yaxis = 0;
len = 0;
dir = 90;
walk_anim_speed = 0.15;
//state = scr_tut_move_state;
image_speed = 0;
face = DOWN;
movement = MOVE;

//Create Weapon offset array
weapon_offset[XAXIS, UP] = 6;
weapon_offset[XAXIS, RIGHT] = 0;
weapon_offset[XAXIS, LEFT] = 0;
weapon_offset[XAXIS, DOWN] = -6;
weapon_offset[YAXIS, UP] = -2;
weapon_offset[YAXIS, RIGHT] = 0;
weapon_offset[YAXIS, LEFT] = 0;
weapon_offset[YAXIS, DOWN] = 0;

//Create the sprite array
sprite[RIGHT, MOVE] = spr_toga_walk_right;
sprite[UP, MOVE] = spr_toga_walk_up;
sprite[LEFT, MOVE] = spr_toga_walk_left;
sprite[DOWN, MOVE] = spr_toga_walk_down;

sprite[RIGHT, ATTACK] = spr_toga_walk_right;
sprite[UP, ATTACK] = spr_toga_walk_up;
sprite[LEFT, ATTACK] = spr_toga_walk_left;
sprite[DOWN, ATTACK] = spr_toga_walk_down;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition to death room
event_inherited();

persistent = false;
var transition = instance_create(0, 0, obj_room_fade);
transition.duration = 2;
transition.next_room = rm_death;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// actually taking this over for the action queue

// alarm for dash state
//state = scr_tut_move_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move player
depth = -y;
script_execute(cur_action);

//set sprite
sprite_index = sprite[face, movement];

//check for death
if (obj_hero_stats.hp &lt;= 0) {
    instance_destroy();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_health">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect health
with (other) {
    instance_destroy();
}

audio_play_sound(snd_pickup, 6, false);

with (obj_hero_stats) {
    hp = min(hp + 5, max_hp);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go through the door
if (room_exists(other.new_room)) {
    room_goto(other.new_room);
    
    x = other.new_x;
    y = other.new_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change back to move state

if (state == scr_tut_attack_state) {
    state = scr_tut_move_state;
    attacked = false;
    
    image_index = 0;
    switch(sprite_index) {
        case spr_toga_attack_up:
            sprite_index = spr_toga_walk_up;
            break;
        case spr_toga_attack_down:
            sprite_index = spr_toga_walk_down;
            break;
        case spr_toga_attack_right:
            sprite_index = spr_toga_walk_right;
            break;
        case spr_toga_attack_left:
            sprite_index = spr_toga_walk_left;
            break;
    }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New physics fixture on room start
//phy_fixed_rotation = true;
persistent = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw action queue
draw_set_color(c_white);
if (ds_exists(action_queue, ds_type_list)) {
    if (cur_action_id != -1) {
        draw_text(32, display_get_gui_height() - 32, "Current Action: " + g_hero_actions[# 0, cur_action_id]);
    }
    for (var i = 0; i &lt; ds_list_size(action_queue); i++) {
        draw_text(32, display_get_gui_height() - (48 + 16 * i), g_hero_actions[# 0, action_queue[| i]]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
